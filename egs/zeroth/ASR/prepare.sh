#!/usr/bin/env bash

set -eou pipefail

nj=15
stage=-1
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/LibriSpeech
#      You can find SPEAKERS, and
#      recData01 recData02 recData03 testData01 testData02
#      You can download them from https://www.openslr.org/40
#
#  - $dl_dir/lm
#      This directory contains the following files downloaded from
#       http://www.openslr.org/resources/40
#
#        - zeroth.lm.fg.arpa.gz
#        - zeroth.lm.tg.arpa.gz
#        - zeroth.lm.tgmed.arpa.gz
#        - zeroth.lm.tgsmall.arpa.gz
#        - zeroth_lexicon
#        - zeroth_morfessor.seg
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  5000
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le -1 ] && [ $stop_stage -ge -1 ]; then
  log "stage -1: Download LM"
  [ ! -e $dl_dir/lm ] && mkdir -p $dl_dir/lm
  ./local/download_lm.py --out-dir=$dl_dir/lm
fi

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "stage 0: Download data"

  # If you have pre-downloaded it to /path/to/LibriSpeech,
  # you can create a symlink
  #
  #   ln -sfv /path/to/LibriSpeech $dl_dir/LibriSpeech
  #
  #If [ ! -d $dl_dir/LibriSpeech/train-other-500 ]; then
  #  lhotse download librispeech --full $dl_dir
  #fi

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #   ln -sfv /path/to/musan $dl_dir/
  #
  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare ZerothSpeech manifest"
  # We assume that you have downloaded the LibriSpeech corpus
  # to $dl_dir/LibriSpeech
  mkdir -p data/manifests
  lhotse prepare zeroth -j $nj $dl_dir/zeroth data/manifests
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare musan manifest"
  # We assume that you have downloaded the musan corpus
  # to data/musan
  mkdir -p data/manifests
  lhotse prepare musan $dl_dir/musan data/manifests
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute fbank for zeroth"
  mkdir -p data/fbank
  ./local/compute_fbank_zeroth.py
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Compute fbank for musan"
  mkdir -p data/fbank
  ./local/compute_fbank_musan.py
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Prepare phone based lang"
  mkdir -p data/lang_phone

  #cat $dl_dir/lm/zeroth_lexicon | grep -E "^[가-힣]" > $dl_dir/lm/zeroth_lexicon.trim

  (echo '!SIL SIL'; echo '<SPOKEN_NOISE> SPN'; echo '<UNK> SPN'; ) |
    cat - $dl_dir/lm/zeroth_lexicon |
    sort | uniq > data/lang_phone/lexicon.txt

  if [ ! -f data/lang_phone/L_disambig.pt ]; then
    ./local/prepare_lang.py
  fi
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "State 6: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir
    # We reuse words.txt from phone based lexicon
    # so that the two can share G.pt later.
    cp data/lang_phone/words.txt $lang_dir

    if [ ! -f $lang_dir/train.txt ]; then
      #log "Generate data for BPE training"
      #files=$(
      #  find $dl_dir/zeroth/recData0*/ -name "*.txt"
      #)
      #for f in ${files[@]}; do
      #  cat $f | cut -d " " -f 2-
      #done | sort | uniq > $lang_dir/train.txt

      # uniq word list and it frequency
      cat $dl_dir/lm/uniqWordList | awk '{print $2"\t"$1}' > $lang_dir/train.txt
    fi

    if [ ! -f $lang_dir/bpe.model ]; then
      ./local/train_bpe_model.py \
        --lang-dir $lang_dir \
        --vocab-size $vocab_size \
        --model-type "bpe" \
        --input-format "tsv"
    fi

    if [ ! -f $lang_dir/L_disambig.pt ]; then
      ./local/prepare_lang_bpe.py --lang-dir $lang_dir
    fi
  done
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Prepare G"
  # We assume you have install kaldilm, if not, please install
  # it using: pip install kaldilm
  
  vocab_size=${vocab_sizes[0]}
  lang_dir=data/lang_bpe_${vocab_size}

  mkdir -p data/lm
  if [ ! -f data/lm/G_3_gram.fst.txt ]; then

    [ ! -f $dl_dir/lm/zeroth.lm.tgmed.arpa ] && \
      gunzip $dl_dir/lm/zeroth.lm.tgmed.arpa.gz

    # It is used in building HLG
    python3 -m kaldilm \
      --read-symbol-table="data/lang_phone/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      $dl_dir/lm/zeroth.lm.tgmed.arpa > data/lm/G_3_gram.fst.txt
  fi

  if [ ! -f data/lm/G_4_gram.fst.txt ]; then

    [ ! -f $dl_dir/lm/zeroth.lm.fg.arpa ] && \
      gunzip $dl_dir/lm/zeroth.lm.fg.arpa.gz

    # It is used for LM rescoring
    python3 -m kaldilm \
      --read-symbol-table="data/lang_phone/words.txt" \
      --disambig-symbol='#0' \
      --max-order=4 \
      $dl_dir/lm/zeroth.lm.fg.arpa > data/lm/G_4_gram.fst.txt
  fi
fi

if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 8: Compile HLG"
  ./local/compile_hlg.py --lang-dir data/lang_phone

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    ./local/compile_hlg.py --lang-dir $lang_dir
  done
fi

cd data && ln -sfv lang_bpe_5000 lang_bpe
